{"version":3,"sources":["webpack:///src/app/register/register.page.html","webpack:///src/app/register/register-routing.module.ts","webpack:///src/app/register/register.module.ts","webpack:///src/app/register/register.page.scss","webpack:///src/app/register/register.page.ts"],"names":["routes","path","component","RegisterPageRoutingModule","imports","forChild","exports","RegisterPageModule","declarations","RegisterPage","navCtrl","loadingController","db","afAuth","formBuilder","alertController","http","errorMessage","successMessage","validation_messages","type","message","get","subscribe","data","alert","id","console","log","validations_form","group","name","compose","minLength","required","email","pattern","password","city","state","country","value","create","then","a","present","registerUser","res","dismiss","alertMsg","err","cssClass","header","buttons","text","handler","goLoginPage","navigateBack","Promise","resolve","reject","createUserWithEmailAndPassword","collection","doc","user","uid","set","role","selector","template"],"mappings":"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","file":"register-register-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n  <form class=\\\"form\\\" [formGroup]=\\\"validations_form\\\" (ngSubmit)=\\\"tryRegister(validations_form.value)\\\">\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Name</ion-label>\\n      <ion-input type=\\\"text\\\" name=\\\"name\\\" formControlName=\\\"name\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.name\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('name').hasError(validation.type) && (validations_form.get('name').dirty || validations_form.get('name').touched)\\\">\\n          <ion-text color=\\\"danger\\\"><small>{{ validation.message }}</small></ion-text>\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Email</ion-label>\\n      <ion-input type=\\\"email\\\" name=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n          <ion-text color=\\\"danger\\\"><small>{{ validation.message }}</small></ion-text>\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Password</ion-label>\\n      <ion-input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-controll\\\" required></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('password').hasError(validation.type) && (validations_form.get('password').dirty || validations_form.get('password').touched)\\\">\\n          <ion-text color=\\\"danger\\\"><small>{{ validation.message }}</small></ion-text>\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">City</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"city\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.city\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('city').hasError(validation.type) && (validations_form.get('city').dirty || validations_form.get('city').touched)\\\">\\n          <ion-text color=\\\"danger\\\"><small>{{ validation.message }}</small></ion-text>\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">State</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"state\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.state\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('state').hasError(validation.type) && (validations_form.get('state').dirty || validations_form.get('state').touched)\\\">\\n          <ion-text color=\\\"danger\\\"><small>{{ validation.message }}</small></ion-text>\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Country</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"country\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.country\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('country').hasError(validation.type) && (validations_form.get('country').dirty || validations_form.get('country').touched)\\\">\\n          <ion-text color=\\\"danger\\\"><small>{{ validation.message }}</small></ion-text>\\n        </div>\\n      </ng-container>\\n    </div>\\n    \\n    <ion-button class=\\\"submit-btn\\\" expand=\\\"block\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\">Register</ion-button>\\n    <label class=\\\"success-message\\\">{{successMessage}}</label>\\n    <div class=\\\"error-message ion-text-center\\\"><ion-text color=\\\"danger\\\"><small>{{errorMessage}}</small></ion-text></div>\\n  </form>\\n  <p class=\\\"go-to-login text-center\\\">Already have an account? <a (click)=\\\"goLoginPage()\\\">Login Now.</a></p>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RegisterPageRoutingModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","export default \".text-center {\\n  text-align: center;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksa0JBQUE7QUFDSiIsImZpbGUiOiJzcmMvYXBwL3JlZ2lzdGVyL3JlZ2lzdGVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi50ZXh0LWNlbnRlciB7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { NavController, LoadingController, AlertController } from '@ionic/angular';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n\n\n  validations_form: FormGroup;\n  errorMessage: string = '';\n  successMessage: string = '';\n\n  validation_messages = {\n    'name': [\n      { type: 'required', message: 'Name is required.' },\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' }\n    ],\n    'city': [\n      { type: 'required', message: 'City is required.' }\n    ],\n    'state': [\n      { type: 'required', message: 'State is required.' }\n    ],\n    'country': [\n      { type: 'required', message: 'Country is required.' },\n    ]\n  };\n\n  constructor(\n    private navCtrl: NavController,\n    public loadingController: LoadingController,\n    private db: AngularFirestore,\n    private afAuth: AngularFireAuth,\n    private formBuilder: FormBuilder,\n    public alertController: AlertController,\n    private http : HttpClient\n  ) {\n    this.http.get(\"http://127.0.0.1:3000/details/9\").subscribe((data:any) => {\n      alert(data.id);\n      console.log(data);\n    });  \n  }\n\n  ngOnInit() {\n    this.validations_form = this.formBuilder.group({\n      name: new FormControl('', Validators.compose([\n        Validators.minLength(2),\n        Validators.required\n      ])),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required\n      ])),\n      city: new FormControl('', Validators.compose([\n        Validators.required\n      ])),\n      state: new FormControl('', Validators.compose([\n        Validators.required\n      ])),\n      country: new FormControl('', Validators.compose([\n        Validators.required\n      ])),\n    });\n  }\n\n  async tryRegister(value) {\n    return await this.loadingController.create({\n      message: 'Please wait...',\n    }).then(a => {\n      a.present().then(() => {\n        this.registerUser(value)\n        .then(res => {\n          a.dismiss();\n          this.errorMessage = \"\";\n          //this.successMessage = \"Your account has been created. Please log in.\";\n          this.alertMsg();\n        }, err => {\n          a.dismiss();\n          this.errorMessage = err.message;\n          this.successMessage = \"\";\n        })\n      });\n    });\n  }\n\n  async alertMsg() {\n    const alert = await this.alertController.create({\n      cssClass: 'my-custom-class',\n      header: 'Success!',\n      message: \"Your account has been created. Please log in.\",\n      buttons: [ {\n          text: 'Login Now',\n          handler: () => {\n            this.goLoginPage();\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  goLoginPage() {\n    this.navCtrl.navigateBack('');\n  }\n\n  registerUser(value) {\n    return new Promise<any>((resolve, reject) => {\n      this.afAuth.createUserWithEmailAndPassword(value.email, value.password)\n        .then((res) => {\n          this.db.collection('users').doc(res.user.uid).set({\n            name : value.name,\n            city : value.city,\n            state : value.state,\n            country : value.country,\n            role : 'customer'\n          }).then(res => {\n            resolve(res)\n          }, err => reject(err));\n        },\n        err => reject(err))\n    })\n  }\n\n\n}"]}